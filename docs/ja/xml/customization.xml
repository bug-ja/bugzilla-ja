<!-- <!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook V4.1//EN"> -->
<chapter id="customization">
  <title>Bugzilla のカスタマイズ</title>

  <section id="extensions">
    <title>Bugzilla 拡張機構</title>

    <para>
      Bugzilla をカスタマイズする最もよい方法の一つは、Bugzilla 
      拡張を書くことです。Bugzilla 拡張を利用することにより、
      コードと UI の両方を、他の Bugzilla ユーザにも、そして将来の Bugzilla 
      バージョンにも最小限の労力で適用できるようにすることができます。
    </para>

   <para>
      拡張を作成する方法に関しては
      <ulink url="api/Bugzilla/Extension.html">Bugzilla 拡張の解説
      </ulink> を参照してください。
    </para>
  </section>

  <section id="cust-skins">
    <title>カスタムスキン (外装)</title>
    
    <para>
      Bugzilla では複数の外装を利用することができます。これらには独自の CSS、
      そしておそらく独自の Bugzilla 用の画像が含まれるでしょう。
      新しい独自の外装を作成するには、二つの方法があります。
      <itemizedlist>
        <listitem>
          <para>
            単一の CSS ファイルを作り、
            <filename>skins/contrib</filename> ディレクトリに置く。
          </para>
        </listitem>
        <listitem>
          <para>
            <filename>skins/standard/</filename> ディレクトリにある全てと同じ名前の
            CSS ファイルを含むディレクトリを作成し、
            <filename>skins/contrib/</filename> に置く。
          </para>
        </listitem>
      </itemizedlist>
    </para>
      
    <para>
      ファイルを置くかディレクトリを作成したあと、ファイル権限を正しく設定するために
      checksetup.pl を必ず実行してください。
    </para>
    <para>
      新外装を導入すると、ユーザの一般的な設定の中に、
      オプションとして表示されるようになります。全ユーザに特定の外装を強制したい場合、
      既定の設定画面でそれを選択し、設定で変更を "有効にする" 
      のチェックを外してください。
    </para>
  </section>
  
  <section id="cust-templates">
    <title>テンプレートのカスタマイズ</title>
    
    <para>
      管理者は Perl ファイルを編集することや、将来の新バージョンへアップグレードする際に、
      マージでの衝突の悪夢に悩まされることなく、Bugzilla の表示を設定することが可能です。
    </para>
    
    <para>
      テンプレート化は Bugzilla のローカライズをも可能としました。
      Bugzilla の UI 言語をユーザのブラウザの設定から決定することも可能になりました。
      より詳細に関しては
      <xref linkend="template-http-accept"/> を参考にしてください。
    </para>
    
    <section id="template-directory">
      <title>テンプレートディレクトリ構造</title>
      <para>
        テンプレートディレクトリ構造は <filename>template</filename> 
        という名前の最上位ディレクトリの下に、インストールされている言語の
        ディレクトリが作成されています。一つ目のレベルのディレクトリは、
        テンプレートの言語が何かを示します。英語の Bugzilla テンプレートは、
        ディレクトリ名 <filename>en</filename> となり、全体としては
        <filename>template/en</filename> となります。この <filename>template/en</filename>
        には、<filename>default</filename> ディレクトリがあり、Bugzilla 
        の標準的なテンプレートが入っています。
      </para>

      <warning>
        <para>
          <filename>data/templates</filename> も存在しますが、このディレクトリは
          Template Toolkit が既定のもしくはカスタムのディレクトリを、
          それぞれコンパイルしたものを保存する場所ですので、<emphasis>絶対に</emphasis> 
          このディレクトリのファイルは直接編集しないでください。
          もし編集したとしても次に Template Toolkit がコンパイルした時に、
          全てが失われます。
        </para>
      </warning>
    </section>

    <section id="template-method">
      <title>カスタマイズの方法の選択</title>
      <para>
        Bugzilla のテンプレートを編集する場合、最初にすべき決断は、
        実行するためにどうやるのか、ということです。二つの選択肢があり、
        主に編集内容がどういうものであるかや、アップグレードプランによります。
      </para> 

      <para>
        一つ目は、直接 <filename>template/en/default</filename>
        のディレクトリにあるテンプレートを編集するという方法です。
        Bzr 経由で Bugzilla をアップデートするのであれば、
        この方法がもっとも望ましい方法でしょう。なぜなら、
        <command>bzr update</command> を実行した時に、あなたの変更も、
        更新されたバージョンに自動的にマージされるからです。
      </para>

      <note>
        <para>
          この方法をとった場合、Bzr がアップデート中に衝突を検出すると、
          衝突したテンプレート (とおそらくサイトのほかの部分も) 
          は衝突を解消するまで動作しないでしょう。
        </para>
      </note>

      <para>
        二つ目の方法は、テンプレートを <filename>template/en/custom</filename>
        ディレクトリの中に同じディレクトリ構造でコピーし、それを変更するものです。
        このディレクトリ内のテンプレートは、自動的に同一の名前の 
        <filename>default</filename> ディレクトリにあるテンプレートを、
        上書きするものとして取り扱われます。
      </para>

      <note>
        <para>
          <filename>custom</filename> ディレクトリは最初から存在するものではなく、
          必要であればまず作成する必要があります。
        </para>
      </note>

      <para>
        二つ目の方法では、アップグレード時に上書きを行う場合に利用すべきで、
        そうでなければあなたの変更はなくなってしまいます。
        アップグレードに Bzr を利用している場合でも、
        主要バージョン変更を行おうとしている場合にはこちらの方が適しています。
        このアップグレードにおいても、
        このディレクトリの中のファイルは影響を受けないことが保障されており、
        あなたのテンプレートを利用し続けるか、もしくは、
        新しいバージョンに手作業で変更を統合するかの選択が可能になります。
      </para>

      <para>
        この方法を利用する場合でも、あなたのサイトは、
        テンプレートに非互換の更新が行われた場合に動作しなくなる可能性があります。
        そういった変更は、Bugzilla の安定版を利用している場合は、
        リリースノートなどに記載されています。もし、開発版を利用している場合は、
        変更について前の安定版のリリースノートにある同様の部分に記載されるまでは、
        この更新については自分自身で十分に把握しておく必要があります。
      </para>

      <note>
        <para>
          どの方式を利用したとしても、
          <filename>template/en/default</filename> ディレクトリの中にある
          テンプレートを更新した後や、<filename>custom</filename>
          ディレクトリ中のテンプレートを作成・更新した際に、
          <command>./checksetup.pl</command> を実行する必要があります。 
        </para>
      </note>

      <warning>
        <para>
          <filename>custom</filename> ディレクトリに新しいテンプレートを作成したあと、
          <emphasis>必ず</emphasis> <command>./checksetup.pl</command>
          を実行してください。この時にエラーが発生していると、
          不完全なエラーメッセージが表示されることになります。
        </para>
      </warning>
    </section>
    
    <section id="template-edit">
      <title>テンプレートの編集方法</title>
      
      <note>
        <para>
          もし、テンプレートへの編集内容を Bugzilla そのものに反映させようとする場合、
          <ulink url="http://www.bugzilla.org/docs/developer.html">開発者ガイド
          </ulink> の関連する部分を読んでください。
        </para>
      </note>
      
      <para>
        Template Toolkit の言語そのものの仕様に関しては、このガイドの範囲ではありません。
        現在のテンプレートを参照することで、簡単な部分を把握することは可能でしょう。
        もしくは、
        <ulink url="http://www.template-toolkit.org">Template Toolkit ホームページ
        </ulink> にあるマニュアルを参照してください。
      </para>
      
      <para>
        特別の注意を払う必要がある部分は、テンプレートに渡されたデータに対する
        HTML フィルターを適切に行うところです。これは、
        データが特別な HTML 文字列を含む可能性がある場合、
        たとえば &lt; など、このデータは HTML に導入できないので、
        &amp;lt; といったエンティティー形式に変換する必要があります。
        このためには Template Toolkit の 'html' フィルターを利用できます。
        (もしくは URL のなかの特殊文字には 'uri' フィルターを利用できます。)
        処理を忘れた場合、あなたのサイトが、
        クロスサイトスクリプティング攻撃の影響を受ける可能性があります。
      </para>

      <para>
        テンプレートの編集は <quote>簡単なカスタムフィールド</quote> 
        としても有用です。
        たとえば、ステータスホワイトボードが不要で、<quote>ビルド文字列</quote>
        のために自由入力フォームが必要な場合、
        テンプレートのフィールドラベルを編集することで実現できます。
        内部的には status_whiteboard を呼び出してはいますが、
        ユーザがそれを知ることはありません。
      </para>
      
    </section>
            
    
    <section id="template-formats">
      <title>テンプレート形式と型</title>
      
      <para>
        いくつかの CGI ではひとつ以上のテンプレートを利用しています。
        たとえば、<filename>buglist.cgi</filename> はそれ自身だけで RDF 
        や二つの形式の HTML (複雑なものと単純なもの) を出力できます。
        これを提供しているメカニズムは拡張して利用することが可能です。
      </para>

      <para>
        Bugzilla は異なる型の出力を行うことができ、
        前述のように複数の形式を提供できます。特定の型の要求は、
        <filename>&lt;cginame&gt;.cgi</filename> URL に、
        &amp;ctype=&lt;contenttype&gt; (rdf や html など) を付け加えることで行えます。
        特定の形式の要求は、URL に &amp;format=&lt;format&gt; 
        (simple や complex など) を付け加えることで行えます。
      </para>
      
      <para>
        CGI が複数の形式や型の出力をサポートしているかを判断するには、
        CGI を <quote>get_format</quote> で検索してください。存在していなくても、
        複数の形式や型のサポートは難しくはありません。config.cgi 
        などの既に行われている CGI を参照してください。
      </para>
      
      <para>
        これらをサポートしている CGI に新しい形式のテンプレートを付け加える場合、
        CGI が利用する既存のテンプレートを開き、(存在していれば)
        INTERFACE コメントを参照してください。
        このコメントはどのような変数がテンプレートに渡されるかを記述しています。
        もし記述がなければ、テンプレートやソースコードを読んで、
        取得したい情報がどのように渡されているかを見つける必要があります。
      </para>     
  
      <para>
        マークアップやテキストなどの必要な形式でテンプレートを記述してください。
      </para>
      
      <para>
        あなたのテンプレートでどのような型 (Content-Type) 
        を提供したいかを決定する必要があります。
        これらの型は、<filename>Bugzilla/Constants.pm</filename> 
        の <filename>contenttypes</filename> 定数で定義されています。
        もし、利用したい型がここに存在しなければ、追加してください。
        あなたが必要な型につけられている3文字もしくは4文字のタグを覚えてください。
        このタグがテンプレートのファイル名の一部となります。
      </para>

      <note>
        <para>
          型を追加・変更した後、変更を反映させるために、
          <filename>Bugzilla/Constants.pm</filename> を変更するのがいいでしょう。
          また、このファイルはアップグレード時にも、
          過去に型をカスタマイズしていた場合はそれらを反映させる必要があります。
        </para>
      </note>
      
      <para>
        テンプレートを
        <filename>&lt;stubname&gt;-&lt;formatname&gt;.&lt;contenttypetag&gt;.tmpl</filename>
        として保存してください。そして、テンプレートの試験のために CGI を
        <filename>&lt;cginame&gt;.cgi?format=&lt;formatname&gt;&amp;ctype=&lt;type&gt;</filename>
        として呼んでください。
      </para>
    </section>
    
    
    <section id="template-specific">
      <title>特別なテンプレート</title>
      
      <para>
        サイトでのカスタマイズの際に特別に興味を持つことになる、
        いくつかのテンプレートがあります。
      </para>
      
      <para>
        <command>index.html.tmpl</command>:
        Bugzilla のフロントページです。
      </para>      

      <para>
        <command>global/header.html.tmpl</command>:
        全ての Bugzilla のページで利用されるヘッダを定義しています。
        ヘッダは、ユーザの目を引き、おそらく編集したくなる、
        バナーの部分を含みます。しかしながら、このヘッダには
        HTML HEAD セクションも含まれており、
        これを参考にしてスタイルシートや META タグを追加することも可能です。
      </para>

      <para>
        <command>global/banner.html.tmpl</command>:
        <quote>バナー</quote> 本体を含んでおり、全ての Bugzilla 
        ページの先頭部分に表示されます。デフォルトのバナーは単純なものですので、
        サイトの特色のある表示に差し替えることとなるでしょう。
        いくつかのページに含まれる、Bugzilla バージョン番号は、
        どれを実行しているかを示すもので、ユーザにとって、
        どのドキュメントを読むべきかを知るのに利用できますので、残しておくべきです。
      </para>

      <para>
        <command>global/footer.html.tmpl</command>:
        全ての Bugzilla のページで利用されるフッタを定義しています。
        Bugzilla のサイトを特色のある表示に簡単に変更するために必要な、
        もう一つのファイルです。
      </para>

      <para>
        <command>global/variables.none.tmpl</command>:
        Bugzilla ではサイトごとに <quote>ブランド</quote> 付けをするために利用できる、
        用語のリストを定義しています。この方法により、<quote>bugs</quote> 
        のような用語を Bugzilla 全体で <quote>issues</quote> 
        に変換することが可能になります。
        <quote>Bugzilla</quote> の名前や他の単語を変更することができます。
      </para>

      <para>
        <command>list/table.html.tmpl</command>:
        このテンプレートは、Bugzilla によるバグリストの表示方法を定義しています。
        このテンプレートを利用することで、カラム毎の幅や、タイトル、
        各内容の最大表示長さ、長い文の折りたたみ方法を変更することが可能です。
        長いバグリストでは、Bugzilla は既定では 100 行ごとに '区切り'
        を挿入しますが、この動作もこのテンプレートで制御でき、
        この値も変更することができます。
       </para>

      <para>
        <command>bug/create/user-message.html.tmpl</command>:
        バグ報告ページの先頭部分に表示されるメッセージです。
        これを編集することで、ユーザにどのようにバグ報告を行うべきかを伝えられます。
      </para>

      <para>
        <command>bug/process/midair.html.tmpl</command>:
        同じバグに複数のユーザが似たような変更を加えようとした時に利用されるページです。
        二人目のユーザが変更した時、一人目がどのような変更を加えたかを表示し、
        その変更を上書きするか、もしくはバグに戻ってやり直すかを、
        ユーザが選択できるようになります。ページの既定のタイトルとヘッダは、
        "衝突が検出されました !" です。もし、航空業界や、
        その他のこのメッセージが攻撃的と思える環境 (注: 英語版の直訳は、
        "空中衝突検出 !" です) であれば (もちろんそういうことは十分にありえます)
        このメッセージをより環境にあった他のものに変更することになるでしょう。
      </para>

      <para>
        <command>bug/create/create.html.tmpl</command> と
        <command>bug/create/comment.txt.tmpl</command>:
        Bugzilla でのカスタムフィールドの恩恵を受けたくないと考えている場合でも、
        特別なフィールドを利用するのではなく、いくつかの重要な情報を、
        バグ報告に含むようにしたいと考えることがあるかもしれません。
        バグ登録システムは、ドロップダウンリスト、テキストボックスなど、
        自由に HTML ウイジェットを追加できるような拡張性のある設計になっており、
        それらに初期コメントとして値を入れることも可能です。
        隠しフィールド "format" は、
        テンプレートを正常に動作させるためにフォームの中に入れておく必要があります。
        この値はテンプレートのファイル名を接頭辞とします。
        たとえば、ファイルが <filename>create-cust.html.tmpl</filename>
        の場合、
        <programlisting>&lt;input type="hidden" name="format" value="cust"&gt;</programlisting>
        をフォームに含む必要があります。
      </para>

      <para>  
        このサンプルには mozilla.org の
        <ulink url="http://landfill.bugzilla.org/bugzilla-tip/enter_bug.cgi?product=WorldControl&amp;format=guided">
        ガイドつきバグ登録フォーム</ulink> があります。このコードは、
        Bugzilla 配布物の中にサンプルとして含まれています。
        <filename>create-guided.html.tmpl</filename> と
        <filename>comment-guided.html.tmpl</filename> です。
      </para>  

      <para>
        この機能を利用するには、<filename>enter_bug.cgi</filename>
        向けのカスタムテンプレートも必要です。ベースとして利用できる、
        既定のテンプレートは、
        <filename>custom/bug/create/create.html.tmpl</filename>
        となります。これを
        <filename>create-&lt;formatname&gt;.html.tmpl</filename> とし、
        ビルド番号や再現手順など、
        収集したい情報それぞれのためのウィジェットを追加してください。
      </para>

      <para>
        そして、テンプレートを
        <filename>custom/bug/create/comment.txt.tmpl</filename> の場所に、
        <filename>comment-&lt;formatname&gt;.txt.tmpl</filename> として置いてください。
        このテンプレートでは <filename>[% form.&lt;fieldname&gt; %]</filename>
        の形式で、作成したフォームフィールドの値を参照できるようになります。
        バグ報告の登録があると、バグ報告につけられる最初のコメントは、
        このテンプレートに従ってフォーマットされたものとなります。
      </para> 

      <para>
        たとえば、あなたの enter_bug テンプレートが
        <programlisting>&lt;input type="text" name="buildid" size="30"&gt;</programlisting>
        フィールドを持つ場合、comment.txt.tmpl に
        <programlisting>BuildID: [% form.buildid %]</programlisting>
        があれば、
        <programlisting>BuildID: 20020303</programlisting>
        などと最初のコメントに記録されます。
      </para>            
    </section>          


    <section id="template-http-accept">
      <title>Bugzilla をユーザの利用言語を考慮するよう設定する</title>

      <para>Bugzilla は Accept: HTTP ヘッダを参照します。
      他の言語のテンプレートも導入でき、Bugzilla はあなたが指定した順序に従い、
      最適な言語を選択します。さまざまな言語のテンプレートを <ulink 
      url="http://www.bugzilla.org/download.html#localizations"/> から入手できます。
      新しい言語の登録方法に関しても上記ページにあります。
      </para>
    </section>
      
  </section>

  <section id="cust-change-permissions">
    <title>どのユーザがどの情報を変更できるかについてのカスタマイズ</title>
    
    <warning>
      <para>
        この機能は試験的なものと考えてください。変更する対象となる Bugzilla 
        コードは安定的なものではなく、バージョン間で変更や移動がある可能性が
        あります。ここにあるような変更を行う場合は、
        バージョン間のアップグレードを行う場合には、
        その変更を再び書き直すかポートする必要がある可能性があります。
      </para>
    </warning>
      
    <para>
      どの社員、もしくは社員グループがバグシステムの中でどのような変更を加えら
      れるかについての決まりを持つ会社があるとします。たとえば、
      バグの QA コンタクトのみがバグを VERIFY (確認済み) に変更できると
      決められているかもしれません。Bugzilla ではだれがどのような変更を加えられ
      るかについて、独自の規定を導入しやすいように設計されています。
    </para>

    <para>
      既定では、担当者、QA 担当者、もしくは <emphasis>editbugs</emphasis> 
      権限を持つユーザは、グループ権限での制限(ユーザが全ての必要なグループに
      所属している場合は変更可能)を除き、どのバグのフィールドでも変更できます。
      バグ報告者はいくつかのフィールドを書き換えられますが、制限されています。
      <emphasis>editbugs</emphasis> 権限を持たない他のユーザは、
      コメントを追加すると CC リストに追加するを除いて、バグを更新できません。
    </para> 
    
    <para>
      最大限の自由度があるカスタマイズは、Bugzilla の Perl コードを編集する
      ことです。これにより、管理者は誰が何をできるかについての完全な編集が
      可能になります。これのためのメソッドは <filename>Bugzilla/</filename>
      ディレクトリの中の <filename>Bug.pm</filename> に定義されている
      <filename>check_can_change_field()</filename> です。
      ファイルを開き、<quote>sub check_can_change_field</quote> 
      を検索すると見つかるでしょう。
    </para>
    
    <para>
      この関数には、どのように動作するのかが一目でわかるコメントが記述されており、
      どのように変更すればいいのかがわかるようになっています。
      特にマークしている部分を変更しないでください - その部分は関数のほかの部分
      がきちんと動作するための <quote>つなぎ</quote> の部分です。
      それらの部分の間に、コードサンプルが次のように記述されています :
      <programlisting>    # Allow the assignee to change anything.
    # (担当者が全てを変更可能にする設定; 注: コードには日本語はありません)
    if ($ownerid eq $whoid) {
        return 1;
    }</programlisting>
      この部分がコードで何を行っているかを示しています。
    </para>
      
    <para>
      ここで、何を堂変更すればいいのでしょうか？単純な変更としては、
      提示されている部分を削除することです - たとえば、
      どのユーザもコメントをバグに追加できないようにするには、
      <quote>Allow anyone to change comments.</quote>
      (<quote>全てのユーザがコメントを変更できるようにする)</quote>
      という部分を削除します。報告者が登録したバグに対してどのような権限も
      持たないようにするには、報告者に関連する全ての部分を削除してください。
    </para>
    
    <para>
      より複雑な変更はより難しいものになります。基本的には、関数の正しい場所に
      確認コードを追加することで、全ての値が設定されているかを確認すること
      でしょう。ただし、$ownerid がデータベースから取得されるまで $ownerid 
      の値を確認しないようにしてください。特定の条件が満たされたときに 1 (許可)
      を返す正論理と、0 (却下) を返す負論理のどちらでも利用できます。例: 
      <programlisting>    if ($field eq "qacontact") {
        if (Bugzilla->user->in_group("quality_assurance")) {
            return 1;
        } 
        else {
            return 0;
        }
    }</programlisting>
      この条件は、"quality_assurance" グループのユーザのみがバグの QA 
      コンタクトを変更できるようにしています。
    </para>

    <para>
      より複雑には以下のような記述も可能です。
      <programlisting><![CDATA[    if (($field eq "priority") &&
        (Bugzilla->user->email =~ /.*\@example\.com$/))
    {
        if ($oldvalue eq "P1") {
            return 1;
        } 
        else {
            return 0;
        }
    }]]></programlisting>
      この条件では、優先度を設定しようとしていて、メールアドレスが 
      @example.com である場合は、変更前の値が "P1" である場合のみ変更可能
      にしています。あまり利用場面はありませんが、一つの実例です。
    </para>

    <warning>
      <para>
        <filename>process_bug.cgi</filename> をこの方法で変更する場合、
        DO_NOT_CHANGE ブロックで囲まれたコードを変更しないでください。
        この部分を変更すると、セキュリティー上の問題が発生したり、
        完全に動作しなくなる可能性があります。
      </para>
    </warning>
    
    <para>
      利用可能なフィールド名は、データベースの bugs テーブルを参照してください。
      組織内向けに独自ルールを記述するための手助けが必要なら、
      ニュースグループで聞いてみてください。
    </para>    
  </section>   

  <section id="integration">
    <title>Bugzilla をサードパーティー製ツールと統合する</title>

    <para>
      クライアントサイド・サーバサイドを問わず、さまざまなユーティリティーや
      アプリケーションが Bugzilla に統合可能です。Bugzilla 本体では
      メンテナンスされておらず、Bugzilla リリース時の QA テストの対象外です
      ので、独自判断でご利用ください。
      <ulink url="https://wiki.mozilla.org/Bugzilla:Addons" /> にリストがあります。
    </para>
  </section>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-always-quote-attributes:t
sgml-auto-insert-required-elements:t
sgml-balanced-tag-edit:t
sgml-exposed-tags:nil
sgml-general-insert-case:lower
sgml-indent-data:t
sgml-indent-step:2
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
sgml-minimize-attributes:nil
sgml-namecase-general:t
sgml-omittag:t
sgml-parent-document:("Bugzilla-Guide.xml" "book" "chapter")
sgml-shorttag:t
sgml-tag-region-if-active:t
End:
-->

